# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        column_nodes=defaultdict(list)
        queue=deque([(root,0)])
        while queue:
            node,column=queue.popleft()
            column_nodes[column].append(node.val)
            if node.left:
                queue.append((node.left,column-1))
            if node.right:
                queue.append((node.right,column+1))
        sortedcolumn=sorted(column_nodes.items(),key=lambda x: x[0])
        result=[]
        for column, nodes in sortedcolumn:
            
            result.append(sorted(nodes))

        return result